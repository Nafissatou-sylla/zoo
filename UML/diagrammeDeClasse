@startuml

package "vue" {
	class Zoo {
		-animal: Animal
		-cages: ArrayList<Case> 
		-visiteurs: list<Visiteur>
		
		+ajouterUnVisiteur(visiteurs: ArrayList<Visiteur>): ArrayList<Visiteur>
		+afficherAnimals()
		+donnerAManger()
		+faireSortirUnVisiteur(visiteurs: List<Visiteurs>): Visiteur
	}
	
	class Main{
		
	}	
}

package "controleur" {
	class Manager <<Singleton>> {
		-{static} instance: Manager
		-cages: Cage[]
		
		-init()
		+displayAnimals(): List<String>
		+getEatToAnimal()
	}
}

package "model" {
	Abstract class Animal{
		-nom: String
		-age: int
		-poids: double

		#grossir(poids: double)
		#perdreDuPoids(poids: double) 
		+{abstract} manger()
		+{abstract} dormir()
	}

	class Lion{
		+sauter() 
		+courir()
		+crier() : String
		+devorer(gazelle: Gazelle)
		+devorer(visiteur: Visiteur)

	}

	class Singe {
		+sauter() 
		+crier(): String
	}

	class Gazelle {
		-longueurCornes: double
		
		+courir()
	}

	interface Mangeable{
		+devorer(gazelle: Gazelle): double
		+devorer(visiteur: Visiteur): double
	}
	
	class Cage{
		-animal: Animal
		+donnerAManger()
		+estVide(): boolean
		+entrerUnAnimal(animal: Animal)
		+sortirUnAnimal(): Animal
	 }

	class Visiteur {
		-poids: double
	}
	
	package "technique"{
		class CageOccupyException <<Exception >> {
			+CageOccupyException(message: String)
			+CageOccupyException()
		}
	}
}



Zoo *- "1 manager"  Manager
Manager o--- "0--n  cages" Cage
Main *--"1 zoo"  Zoo
Zoo -" 0--10  visiteurs "  Visiteur
Cage -- "0--1 animal" Animal

Exception  <|-- CageOccupyException
Animal <|-- Lion
Animal <|-- Singe
Animal <|-- Gazelle
Lion ..|> Mangeable
 
@enduml